// Code generated by go-swagger; DO NOT EDIT.

package ipamwrapper_agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/Inspur-Data/ipamwrapper/api/v1/models"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteIpamParams creates a new DeleteIpamParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteIpamParams() *DeleteIpamParams {
	return &DeleteIpamParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteIpamParamsWithTimeout creates a new DeleteIpamParams object
// with the ability to set a timeout on a request.
func NewDeleteIpamParamsWithTimeout(timeout time.Duration) *DeleteIpamParams {
	return &DeleteIpamParams{
		timeout: timeout,
	}
}

// NewDeleteIpamParamsWithContext creates a new DeleteIpamParams object
// with the ability to set a context for a request.
func NewDeleteIpamParamsWithContext(ctx context.Context) *DeleteIpamParams {
	return &DeleteIpamParams{
		Context: ctx,
	}
}

// NewDeleteIpamParamsWithHTTPClient creates a new DeleteIpamParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteIpamParamsWithHTTPClient(client *http.Client) *DeleteIpamParams {
	return &DeleteIpamParams{
		HTTPClient: client,
	}
}

/*
DeleteIpamParams contains all the parameters to send to the API endpoint

	for the delete ipam operation.

	Typically these are written to a http.Request.
*/
type DeleteIpamParams struct {

	// IpamDelArgs.
	IpamDelArgs *models.IpamDelArgs

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete ipam params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteIpamParams) WithDefaults() *DeleteIpamParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete ipam params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteIpamParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete ipam params
func (o *DeleteIpamParams) WithTimeout(timeout time.Duration) *DeleteIpamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete ipam params
func (o *DeleteIpamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete ipam params
func (o *DeleteIpamParams) WithContext(ctx context.Context) *DeleteIpamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete ipam params
func (o *DeleteIpamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete ipam params
func (o *DeleteIpamParams) WithHTTPClient(client *http.Client) *DeleteIpamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete ipam params
func (o *DeleteIpamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIpamDelArgs adds the ipamDelArgs to the delete ipam params
func (o *DeleteIpamParams) WithIpamDelArgs(ipamDelArgs *models.IpamDelArgs) *DeleteIpamParams {
	o.SetIpamDelArgs(ipamDelArgs)
	return o
}

// SetIpamDelArgs adds the ipamDelArgs to the delete ipam params
func (o *DeleteIpamParams) SetIpamDelArgs(ipamDelArgs *models.IpamDelArgs) {
	o.IpamDelArgs = ipamDelArgs
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteIpamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.IpamDelArgs != nil {
		if err := r.SetBodyParam(o.IpamDelArgs); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
