// Code generated by go-swagger; DO NOT EDIT.

package health_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHealthyHandlerFunc turns a function with the right signature into a get healthy handler
type GetHealthyHandlerFunc func(GetHealthyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHealthyHandlerFunc) Handle(params GetHealthyParams) middleware.Responder {
	return fn(params)
}

// GetHealthyHandler interface for that can handle valid get healthy params
type GetHealthyHandler interface {
	Handle(GetHealthyParams) middleware.Responder
}

// NewGetHealthy creates a new http.Handler for the get healthy operation
func NewGetHealthy(ctx *middleware.Context, handler GetHealthyHandler) *GetHealthy {
	return &GetHealthy{Context: ctx, Handler: handler}
}

/*
	GetHealthy swagger:route GET /healthy health-check getHealthy

# Get health of ipamwrapper agent

Check the agent health to make sure whether it's ready
for CNI plugin usage
*/
type GetHealthy struct {
	Context *middleware.Context
	Handler GetHealthyHandler
}

func (o *GetHealthy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHealthyParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
